//written by Andre Betz 2007 in Java 1.4.2
//http://www.andrebetz.de

/*data
111111111111111111111111111111111111111111111111111111111111111111111111111111BEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBE11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CEC1111111111BBBBBBBBEBEBEBEBEBEBBEE11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CEC1111111111C1C1:1:1BCBCBCBCBCBCEDE11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CEC1111111111C1C1C1C111111111EDDDD1E11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CEC1111:B:B:B:B:B:B:B:B:B:B:1BEBEC1E11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CEC1111C1C1C1E1E1EEDEDEDEDED1CECE11E11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CEC1111:1:1C1E1E1EBEBEBEBEBE1CECE11E11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CEC111BC1C1C1E1E1E1E1E1E1:1:1CECE11E11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CEC111CD1C1C1BBBBBBBBBBBBBBBBCBCE11E11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CECBB:B:B:B:11111111111EDDDDDDDDD11E11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CECC1E1111111BBBBBBBBBBEBEBEBEBEBEBE11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CECC1E1111111C1C1:1:1:1BCBCECECECECE11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CECC1E1111111C1C1C1C1C11111BCBCBCBCE11111111
111111111111111111111111111111111111111111111111111111111111111111111111111111CBCC1E1:B:B:B:B:B:B:B:B:B:1EDDDDDDDD11111111
111111111111111111111111111111111111111111111111111111111111111111111111111BBB:11C1EBC1C1C1E1E1E1E1E1EED1BEBEBEBEBEBE11111
111111111111111111111111111111111111111111111111111111111111111111111111111BBBBBBC1ECD1:1C1E1E1E1E1E1EBE1CECECECECECE11111
111111111111111111111111111111111111111111111111111111111111111111111111111:B:B:1C1EBCBC1C1E1E1E1E1E1EED1CECECECECECE11111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1ECDCD1C1E1E1E1E1E1EBE1CECECECECECE11111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1:B:B:B:1E1E1E1:1:1:1E1CECECECECECEBE111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1E1111111BBBBBBBBBBBBBBCBCBCBCBCBCBCE111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1E1111111111111111111111111111111111E111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1E1:B:B:B:B:B:B:B:B:B:B:111111111111E111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1EBC1C1C1E1E1E1E1EEDEDED111111111111E111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1ECD1C1C1E1E1E1E1EBEBEBE111111111111E111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1EBCBC1C1E1E1E1:1:1E1E1E111111111111E111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1ECDCD1C1BBBBBBBBBBBBBBBBBBBBBBBBBBBE111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1:B:B:B:1111111111111111111111111111E111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1E1111111111111111111111111111111111E111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1E1:B:B:B:B:B:B:B:B:B:B:1BEBEBEBEBE1E111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1E1C1C1C1E1E1E1E1E1EEDED1CECECECECE1E111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1E1:1C1C1E1E1E1E1E1EBEBE1CECECECECE1E111
111111111111111111111111111111111111111111111111111111111111111111111111111111111C1EBCBC1C1E1E1E1E1E1E1E1E1CECECECECE1E111
1111111111111111111111111111111111111111111111111111111111111BBBBBBBBBBBBBBBBBBBEC1ECDCD1C1E1E1:1:1:1:1E1E1CECECECECEBE111
1111111111111111111111111111111111111111111111111111111111111C1CBC11111111BBBBBBEC1:B:B:B:1BBBBBBBBBBBBBBBBCBCBCBCBCBCE111
1111111111111111111111111111111111111111EDDDDDDDDDDDDDDDDDDD1C1CCD11111111C1:1C1EC1E1111111BBBBBBBBBEBEBEBEBBBBBBBBBBBE111
1111111111111111111111111111111111111111E1BBBBBBBBBBBBBBBBBBB:B:B:11111111C1CBC1EC1E1:B:B:EC1C1:1:11BCBCBCBC1111111111E111
1111111111111111111111111111111111111111E1C1EDDDDD:11111111K11111111111111C1CCD1EC1E1C1C1CEC1C1C1C11111111111111111111:111
1111111111111111111111111111111111111111E1C1E11111CD:EBEB:B:111BBBBBBBBBBB:B:B:1EC1EBC1:1CB:B:B:B:11111111111111111111JJ11
1111111111111111111111111111111111111111E1C1E1111111CBCBC1C1111C1111111111111111EC1ECD1C1C1E1EEDED11111111111111111111BC11
1111111111111111111111111111111111111111E1C1E1111111:EBBB:C1111C1111111111BBBBBBEC1:B:B:B:1E1EBEBE11111111111111111111C111
1111111111111111111111111111111111111111E1C1E1111111CBC111C1111C1111111111C1C1:1EC1E1111111E1E1:1:11111111111111111111C111
1111111111111111111111111111111111111111E1C1E1111111:BBBBBC1111C1111111111C1C1C1EC1E1111111BBBBBBBBBBBBBBBBBBBBBBBBBBBC111
1111111111111111111111111111111111111111E1C1E1111111C11111C1111:JJJJJBBBBB:B:B:1EC1E111111111111111111111111111C1111111111
1111111111111111111111111111111111111111E1C1E1111111:BBBBBC1111C11111C1111111111EC1E1:B:B:B:B:B:B:B:B:B:B:B:B:1C1111111111
1111111111111111111111111111111111111111E1C1E1111111C1111111111C11111C1111BBBBBBEC1E1C1C1C1E1EEDEDEDEDEDEDEDED1C1111111111
1111111111111111111111111111111111111111E1C1E11:BBBB:BE11111111C11111C1111C1:1:1EC1E1:1C1C1E1EBEBEBEBEBEBEBEBE1C1111111111
1111111111111111111111111111111111111111E1C1E11C1111C1E11111111C11111C1111C1C1C1EC1EBCBC1C1E1E1E1EEDEDEDEDEDED1C1111111111
1111111111111111111111111111111111111111E1C1E11:BB:B:1E111111BBC111BB:JJJB:B:B:1EC1ECDCD1C1E1E1E1EBEBEBEBEBEBE1C1111111111
1111111111111111111111111111111111111111E1C1E11CBE11C1E111111C11111C11111C111111EC1:B:B:B:1E1E1E1E1E1EEDEDEDED1C1111111111
1111111111111111111111111111111111111111E1C1E11:CBBB:1E111111C11111C11111C111111ECDE1111111E1E1E1E1E1EBEBEBEBE1C1111111111
1111111111111111111111111111111111111111E1C1E11CBEBEC1E111111C11111C11111C111111BECE1111111E1E1:1:1:1:1E1:1:1:1C1111111111
1111111111111111111111111111111111111111E1C1E11:CBCB:1E111111C11111C11111C1JJJJJ1:CE1111111BBBBBBBBBBBBBBBBBBBBC1111111111
1111111111111111111111111111111111111111E1C1E11CMLLL:DD111111C11111C11111C1K1JJJK11E111111111111111111111111111C1111111111
1111111111111111111111111111111111111111E1C1E11CMJJJM11111111:BEBE1:BEBE1:B:EKLLL11E1:B:B:B:B:B:B:B:B:B:1111111C1111111111
1111111111111111111111111111111111111111E1C1E11CJK111:E111111C1BCBBC1BCBBC1EEBBB:E1EBC1C1C1E1EEDEDEDEDED1111111C1111111111
11111111111111111EDDDDDDDDDDDDDDDDDDDDDDD1C1E11C11B:BCE1:BBBB::BBBB::BBBB:1EEBC11E1ECD1C1C1E1EBEBEBEBEBE1111111C1111111111
11111111111111111E111111111111111111111111C1E11C11C:DDE1CBE11CCBE11CC1111C1EBCED1E1EBCBC1C1E1E1E1E1EEDED1111111C1111111111
11111111111111111E1B:B:B:B:B:B:B:B:B:B:B:BC1E11CB:B:BCE1:CB:B::CBBB::BB:B:1EDDECD:1ECDCD1C1E1E1E1E1EBEBE1111111C1111111111
11111111111111111E1C:D:D:D:D:D:D111111111111E11CC:D:D1E1C1111CC1111CC1111C1:1CE1111:B:B:B:1E1E1:1:1:1E1E1111111C1111111111
11111111111111111E1B:B:B:B:B:B:CEDDDDDDDDDDDD11CB:B:C1E1:EBEB::EBEB::EBEB:1M1CD1111E1111111BBBBBBBBBBBBBBBBBBBBC1111111111
11111111111111111E1C:D:D:D:D:D11E11111111111111CC:D:DDE1CBCBC1CBCBC1CBCBC111:BBBBE1E1:B:B:EBBBBBBBBBBBBBBBBBBBBC1111111111
11111111111111111E1B:B:B:B:B:C11E1:B:B:BBBBBBE1:B:B:BCEB:BBBBB:BBBBB:BEBBBBBC1111E1EBC1C1CEC1C1C1C11111C1111111C1111111111
11111111111111111E1C:D:D:D:D:D11EBC1C1C111111E1C111111:C11111111111111EBEC1111111E1ECD1:1CB:B:B:B:B:B:1C1BEBE11C1111111111
11111111111111111E1B:B:B:B:B:C11ECD1:1C1BB:E1E1C1JJJJK1111111111111111::::1111111E1EBCBC1C1E1EEDEDEDED1C1CECEBEC1111111111
11111111111111111E1C:D:D:D:D:DEDDBC1C1C1C1EEE:1C1KMLL:D:11111111111111ECEC1111111E1ECDCD1C1E1EBEBEBEBE1C1CECECEC1111111111
11111111111111111E1B:B:B:B:B:CE11CD1C1C1C1:EEE1C1KL1111CDD:D:111111111::::1111111E1:B:B:B:1E1EEDEDEDED1CDCECECEC1111111111
11111111111111111E1C:D:D:D:D:DE1:B:B:B:1C1EEE:1C1111111BBB:EC111111111ECEC1111111E1E1111111E1EBEBEBEBE1BCCECECEC1111111111
11111111111111111E111B:B:B:B:CE1C1:B:B:BC1:EEE1C1111111:BE1::111111111::::1111111E1E1111111E1E1E1E1EED1CDCECECEC1111111111
11111111111111111E111C:D:D:D:DE1CBC1C1C111EEE:1C1111111C1E1EC111111111BCBC1111111E1E1111111E1E1E1E1EBE1BCCECECEC1111111111
11111111111111111E111B:B:B:B:CE1CCD1C1C111:EEE1C11:BBBB:1E1::11111111111111111111E1E1111111E1E1E1E1:1E1CDCECECEC1111111111
11EDDDDDDDDDDDDDDD111C:D:D:D:DE1CBCBC1C111EEE:1C11C1111C1E1EC1111111111E:D:D:D:D:D1E1111111BBBBBBBBBBBBBCCECECEC1111111111
11E1111111111111111111111B:B:CE1CCDCD1C111:EEE1C11:BB:B:1E1::1111111111B:B:B:B:B:E1E1111111BBBBBBBBBBBBBBCBCBCBC1111111111
11E1111111111111111111111C:D:DE1:B:B:B:1111EE:1C11CBE11C1E1EC11111111E:D:D:D:D:D:D1E1111111C1C1:1:1111111111111C1111111111
11E1111111111111B:B:B:BBBB:B:CE1C1:B:B:BE1EDBE1C11:CB:B:1E1BC11111111B:B:B:B:B:B:E1E1111111C1CBCBC1111111111111C1111111111
11E1111111111111C11111C11K1111E1CBC1C1C1E1B:L:1C11C1111C1E11111111111E:D:D:D:D:D:D1E1111111C1CCDCD1111111111111C1111111111
11E11111111111BEC111ED:D1K1111E1CCD1:1C1E11E111:BB:EBEB:1E11111111111B:B:B:B:B:B:E1E1:B:B:B:B:B:B:B:B:B:B:B:B:1C1111111111
11E11111111111CEC11M:MMC1K1111E1CBCBC1C1BBB:BBBC111BCBC11E11111111111111111111111E1E1C1C1C1E1EEDEDEDEDEDEDEDED1C1111111111
11E11BBBBBBBBBCBC11MMMMC1K:DDDD1CCDCD1C11111111C111111111E11111111111111111111111:1E1:1:1C1E1EBEBEBEBEBEBEBEBE1C1111111111
11E11C111111111111B1111:1ML11111:B:B:B:11111111CEDDDDDDDDD11111111111111111111111E1EBC1C1C1E1E1E1E1E1EEDEDEDED1C1111111111
11E11C1BBBBBBBBB:MC1111BBBE11111C1:B:B:BBBBBBE1CE11111111111111111111111111111111:1ECD1C1C1E1E1E1E1E1EBEBEBEBE1C1111111111
11E11C1C1C1C1C1:1JCE11EDDDD11111CBC1C1C111111E1CE11111111111111111111111111111111E1BB:B:B:1E1E1E1E1E1:1E1E1:1:1C1111111111
11E11C1C1C1C1CBC11CE11E1BBBBBBE1CCD1:1C1BB:E1E1CE11111111111111111111111111111111:111111111BBBBBBBBBBBBBBBBBBBBC1111111111
11E11C1C1C1C1CCD11CE11E1C1CBC1E1CBC1C1C1C1EEE:1CE11111111111111111111111111111111BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC1111111111
11E11C1C1CBCBCBC11CEBBE1C1CCD1E1CCD1C1C1C1:EEE1CE1111111111111111111111111111111111111111111111111111111111111111111111111
11E11C1C1CCDCDCD11CEC1:B:B:B:1E1:B:B:B:1C1EEE:1CE11111111111111111111111111111111111BBBBBBBBBBBBBBBBBBEBE11111BE1111111111
11E11C1C1CBCBCBC11CB:1E1111111E1C1:B:B:BC1:EEE1CE11111111111111111111111111111111111C1C1:1C1C1:1111111ECEB:111CE1111111111
11E11C1C1CCDCDCDBEC1JJBBBBBBBEE1C1C1C1C111EEE:1CE11111111111111111111111111111111111C1C1CBCBCBC1111111ECECE111CE1111111111
11E11C1C1CBCBCBCCEC111EDDDDDDDE1C1:1C1C111:EEE1CE11111111111111111111111111111111111C1C1CCDCDCD1111111ECECE111CE1111111111
11E11C1C1CCDCDCDCEC111E1BBBBBBE1CBCBC1C111EEE:1CE1111111111111111111111111111:B:B:BB:B:B:B:B:B:B:B:B:1ECECE111CE1111111111
11::B:B:B:B:B:B:CBC111E1CBCBC1E1CCDCD1C111:EEE1CE111111111111111111111111111BC1C1C1CE1E1EEDEDEDEDEDED1ECECE111CE1111111111
11EC1C111111111111C1BBE1CCDCD1E1:B:B:B:1111EE:1CE111111111111111111111111111CD1:1C1CE1E1EBEBEBEBEBEBE1ECECEBE1CE1111111111
11EC1:1BBBBBBBBB:MC1C1:B:B:B:1E1C1:B:B:BE1EDBE1CE111111111111111111111111111BCBC1C1CE1E1E1E1E1EEDEDED1BCBCBCE1CEBE11111111
11EC1C1C1C1C1C1:1JCB:1E1111111E1CBC1C1C1E1B:L:1CEEDDDDDDDDD:DDDD111111111111CDCD1C1CE1E1:1E1E1EBEBEBEEDDDDDDD1CECE11111111
11::B:1C1C1C1CBC11C111BEBBBBBBE1CCD1:1C1E11E111CEE111111111M1ED:111111111BB:B:B:B:1CE1E1E1E1E1:1E1EEDE111BBBBBCBCE11111111
11EC111C1C1C1CCD11C111EDC1:1C1E1CBCBC1C1EBB:BBBCEE111111111MM:MC111111111C1E1:B:B:ECE1E1E1E1E1E1E1EBEE111CEDDDDDDD11111111
11EC111C1CBCBCBC11C111E1C1CBC1E1CCDCD1C1EC11111CEE111111111MMMMC111111111C1EBC1C1CECBBBBBBBBBBBBBBBBBBBBBCBBBBBBBBBBBBE111
11EC111C1CCDCDCD11C111E1C1CCD1E1:B:B:B:1BC11111CEE11111111B1111:111111111C1ECD1C1CB:1BBBBBBBBBBEBEBEBEBECBE11111111111E111
11EC111C1CBCBCBC11C11EDB:B:B:1E1C1:B:B:BBBBBBE1CEEBBBBBBE1:BBE1M111111111C1EBCBC1C1E1C1C1:11111ECECECECECCE11111111111E111
11EC111C1CCDCDCDBEC11:1C111111E1CBC1C1C111111E1CEB:B:111:1CEDD1M111BBBBBBC1ECDCD1C1E1C1C1C11111ECECECECECCE11111111111E111
11EC111C1CBCBCBCCEC11MLCBBBBBBE1CCD1:1C1BB:E1E1CBB:B:B:1JJBBBBB>BBB:B:B:1C1:B:B:B:1BB:B:B:11111BCBCBCBCBCCE11111111111E111
11EC111C1CCDCDCDCECD:B:CC1C1:1E1CBC1C1C1C1EEE:1C11E1E1B::1C11111111111111C1E11111111111111111111111111111CE11111111111E111
11::B:B:B:B:B:B:CBC1CML1C1C1C1E1CCD1C1C1C1:EEE1C11E1E1EDC1C11BBBBBE111111C1E1111111111BBBBBBBBBBBBBBBBBBBCBBBBE1111111E111
11EC1C11111111111111CMLB:B:B:1E1:B:B:B:1C1EEE:1C11BBBBBBC1C1111111B:BBBE1C1E111:B:B:BEC1C1C1C1C1C1:1:1C111ED11E1111111E111
11ECBC11111111111111:1:C111111E1C1:B:B:BC1:EEE1C11BBBBBBBBC11BBBE11E111E1C1E111C1C1C1EC1C1C1C1C1CBCBC1C111EC11E1111111E111
11ECCD11111111111111CML1BBBBBBE1C1C1C1C111EEE:1C11C1111111111111:E1:BBBE1C1E111:1:1C1EC1C1C1C1C1CCDCD1C111EC11E1111111E111
11::B:11111111111111CMLB:B:B:1E1CBC1:1C111:EEE1C11C1111111111111EE1EBE1E1C1E11BC1C1C1EC1C1C1CBCBCBCBC1C111EC11E1111111E111
11EC1111111111111111:1:C111111E1CCD1C1C111EEE:1C11C1111111111111:E1:CB:E1C1E11CD1C1C1EC1C1C1CCDCDCDCD1CDDDDCDDEBBBBBBBE111
11ECDDDDDDDDDDD11111CML1BBBBBBE1:B:B:B:111:EEE1C11C11111111111111E11111E1C1:B:B:B:B:1EC1C1C1CBCBCBCBC11BBBBBBCEC111111E111
11E11111111111C11111CML1C1:1:1E1C1:B:B:BE11EE:1C11C11111111111111:11111:1C1E111111111EC1:1C1CCDCDCDCD11C1C1:11EC111111E111
11E11111111111C11111:1:EC1C1C1E1CBC1C1CED1EDBE1C11C1111111111MLLLLLLLLLL1C1E1:B:B:B:BEC1CBCBCBCBCBCBC11C1C1C11EC111111E111
11E11111111111C11111CMLB:B:B:1E1CCD1:1CBE1B:L:1C11C1111111111M11111111111C1E1C1C1C1E1EC1CCDCDCDCDCDCD11C1C1C11EC111111E111
11E11111111111C11111CML1111111E1CBCBC1CED11E111C11C1111111111M11111BBBBBBC1E1:1C1C1E1B:B:B:B:B:B:B:B:BB:B:B:11EC111111E111
11EBBBBBBBBB:JCE1111:1:EBBBBBBE1CCDCD1CBEBB:BBBC11C1111111111M11111C1C1:1C1EBCBC1CED11E1E1EED11111111111111111EC111111E111
11EC1C1C1C1:11CE1111C11EC1:1:1E1:B:B:B:1BC11111C11C1111111111M11111C1C1C1C1ECDCD1CE111E1E1EBE11111111111111111EC111111E111
11EC1C1C1CBC11CE1111C11ECBCBC1E1C1:B:B:BBBBBBE1C11C1111111111M1:B:B:B:B:1C1:B:B:B::B:1E1E1:1E11111111111111111EC111111E111
11EC1C1C1CCD11CE1111C11ECCDCD1E1CBC1C1C111111E1C11C1111111111M1C1C1111111C1E111111E1E1BBBBBBBBBBBBBBBBBBBBBBBBBC111111E111
11EC1CBCBCBC11CE1111C11B:B:B:1E1CCD1:1C1BB:E1E1C11C1111111MLLL1C1:1BBBBBBC1E111111E1:11111111C111111111111111111111111E111
11EC1CCDCDCD11CE1BBBC111111111E1CBC1C1C1C1EEE:1C11C1111111M1111C1C1C1:1:1C1E111111BBBBBBBBBBBC111111111111111111111111E111
11EC1CBCBCBC11CE1C1B:BBBBBB:J1:1CCD1C1C1C1:EEE1C11C1111111M11BB:B:1C1C1C1C1E11111111111111BBBBBBBBBBBBBBBBBBBBBBBBBBBBE111
11EC1CCDCDCD11CE1C1CBEBEBEC111E1:B:B:B:1C1EEE:1C11C1111111M11C1:B:B:B:B:1C1E1:B:B:BB:B:B:1C111111111111BEBBBBBBBBBBBBEE111
11EC1CBCBCBCBECE1C1C1ECECEC111E1C1:B:B:BC1:EEE1C11C1111111M11C1C1C1111111C1E1C1C1C11E1EED1C111111111111CEC111111111BEEE111
11EC1CCDCDCDCECE1C1C1ECECEC111E1C1C1C1C111EEE:1C11C1111111M11C1CBC1BBBBBBC1EBC1:1C11E1EBE1C111111111111CEC111111111CEEE111
11::B:B:B:B:CBCE1C1C1ECECEC111E1C1:1:1C111:EEE1C11C1111111M11C1CCD1C1CBC1C1ECD1C1C11E1:1E1C111111111111CEC111111111CEEE111
11EC1111111111CE1C1C1ECECEC111E1CBC1C1C111EEE:1C11C1111111MBB:B:B:1C1CCD1C1:B:B:B:11BBBBBBC111111111111CBC1111BBBBBCEEE111
11ECDDD1111111CE1C1C1ECECEC111E1CCD1C1C111:EEE1C11C1111111MC111:B:B:B:B:1C1E1:B:B:BBEBBBBBBBBBBBBBBBBBBC111111CDDDDDEEE111
11E111C1111111CE1C1C1ECECEC111E1:B:B:B:1111EE:1C11:1111111MC111C1C1111111C1E1C1C1C11EC1C1C1C1C1C1:1:111111111111111CEEE111
11E1ED:DD11111CE1C1C1ECECEC111E1C1:B:B:BE1EDBE1C11C1111111MC111C1:1BBBBBBC1E1:1C1C11EC1C1CBCBCBCBCBC111BB:B:B:B:B:1CEEE111
11EM:MM1C11111CE1C1C1ECECEC111E1CBC1C1CED1B:L:1C11:1111111MC111C1C1C1:1C111EBCBC1C11EC1C1CCDCDCDCDCD111C1E1E1E1E1E1CEEE111
11EMMMM1C11111CE1C1C1ECECEC111E1CCD1:1CBE11E111C11C1111111MC1BB:B:1C1CBC111ECDCD1C11B:B:B:B:B:B:B:B:B:B:1E1E1:1:1:1CEEE111
11B11111:11111CE1C1C1BCBCBC111E1CBCBC1CEDBB:EBBC11:1111111MC1C11111C1CCD111:B:B:B:11CE1E1E1E1E1E1E1EEEEE1BBBBBBBBBECEEE111
111:111KL11111CE1C1C1111111111E1CCDCD1CBEC11EC1C11C1111111MC1C1:B:B:B:B:111E1:B:B:BBCE1E1E1E1E1E1E1EBEBE1EDDDDDDDDDCEEE111
111C1111111111CE1C1C:D:1111111E1:B:B:B:1BC11BC1C11:1111111MC1C1C1C111111111E1C1C1C111E1E1E1E1:1:1:1:1E1:1BBBBBBBBBBCEEE111
111CD:D:111111CE1C11C1C1111111E1C1:B:B:BBBBBBBECD1C1111111MC1C1CBC111111111E1:1:1C111BBBBBBBBBBBBBBBBBBBBBBBBBBBBBE1EEE111
111C1C1C111111CE1C11CDC1111111E1CBC1C1C1111111E1C1:D:D:D11MC1C1CCD111111111EBC1C1C1111111BBBBBBBBBBEBEBEBEBEBEBEBEE1EEE111
111C1:1C1BBBBBCE1C11BCC1111111E1CCD1:1C11BB:E1E1CB:B:B:C11JBB:B:B:111111111ECD1C1C1111111C1C1C1C1:1ECECECECECECECEE1EEE111
111C1C1C1C11111E1:D::D:1111111E1CBC1C1C11C1EEE:1CC:D:D:D111C111111111111111:B:B:B:1111111C1C1C1C1C1ECECECECECECECEE1BEE111
111C1:D:1C11111E1C1C11C1111111E1CCD1C1C11C1:EEE1CB:B:B:C11E:111111111111111E111111BBBBBBB:B:B:B:B:1ECECECECECECECEBBBEE111
111:D:1C1C11111E1:1C11C1111111E1:B:B:B:11C1EEE:1CC:D:D:D11ECDDDD11111111111E111111CEDDDDDD111111111BCBCBCBCBCBCBCBBBBEE111
111C1C1C1C11111E1C1C11C1111111E1C11111111C1:EEE1C1:B:B:C11EC1:D:D:D11111111E1:B:B:CEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBEE111
111CDC1C1C11111E1:D:DD:1111111E1C11:B:B:BC1EEE:1C1C1111111EC11111EC:D:D:111EBC1C1C1EC1C1C1C1C1C1C1C1C1C1:1:1:1:1BE111EE111
111BCC1C1C11111:B:B:11C1111111E1C1:C1C1C111:EEE1C1CDDD:D:1EC1111E:1C1C1CD11ECD1C1CEDC1C1C1C1C1C1C1C1C1C1C1C1CBC1CE111EE111
111:D:BC1C11111E1E1E11C1111111E1C1CD1:1C111EEE:1C1C111C1C1EC1111EE1C1C1BC11EBCBC1CBEC1C1C1C1:1:1:1:1C1C1C1C1CCD1CE111EE111
11111C111C11111E1E1:11C1111111E1C1BC1C1C111:EEE1C1C111CDC1EC1111E:1C1CDCD11ECDCD1C1EC1C1C1C1C1C1C1CBCBCBCBCBCBC1CE111EE111
11111:D:DC11111BBBBB:JCDDDDD11E1C1CD1C1C1111EE:1C1C111BCC1EC1111EE1C1BCBC11:B:B:B:1EC1C1C1C1C1C1C1CCDCDCDCDCDCD1CEBE1EE111
B:B:B:B:CC1:B:EC1C1:11E1111C11E1:BB:B:B:111EDBE1C1C111:D:1EC1111E:1:D:D:D:DE1:B:B:BB:B:B:B:B:B:B:B:B:B:B:B:B:B:1CECE1EE111
C:D:D:D:DC1C1CEC1CBC11E1111C11E1C11:B:B:BE1B:L:1C1CD:D:1C1EC1111EE1111111ECEBC1C1C11E1E1E1E1E1EEDEDEDEDED1111111CECE1EE111
B:B:B:B:CC1CBCEC1CCD11E1111C11E1C1BC1C1C1E11E111C111C1C1C1EC1111E:1111111ECECD1:1C11E1E1E1E1E1EBEBEBEBEBE1BEBEBECECE1EE111
C:D:D:D:DC1CCDB:B:B:11E1111C11E1C1CD1:1C1EBB:EBEC111:1C1C1EC1111EE111EDEDECEBCBC1C11E1E1E1E1E1E1E1EEDEDED1CECECECECE1EE111
B:B:B:B:CC1:B:11111111E1111C11E1C1BCBC1C1EC11ECEC111C1C1C1ECDDD1E:111ECECECECDCD1C11E1E1E1E1E1E1E1EBEBEBE1CECECECECE1EE111
C:D:D:D:DC1C1111111111E1111C11E1C1CDCD1C1EC11ECBC111:D:BC1E1:1C1:1111ECECECBB:B:B:11E1E1:1:1:1:1:1:1E1E1E1CECECECECE1EB:BE
B:B:B:B:CCD:DDDDDDDDDDD111E:D1BB:BB:B:B:1BC11BC1111111C111E1C1C1M1111ECECEC111111111BBBBBBBBBBBBBBBBBBBBBBCBCBCBCBCBBBB:JE
C:D:D:D:DDD:DDDDDDDDDDDDDDD1C1111111111111111111EDDDDD:DDDD1:D:D:D111ECECEC11111111111111111111111111111111111111111111111
1111111111111111111111111111CDDDDDDDDDDDDDDDDDDDD1111111111111111CDDDDCDCDCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
data*/

import java.io.*;
import java.util.*;

class NeumannUniversalConstructor{
	ArrayList m_UniConstructor = null;
	int m_xSize = 0;
	int m_ySize = 0;
	int m_xTapeInPos = 0;
	int m_yTapeInPos = 0;
	int m_ActXPos = 0;
	int m_ActYPos = 0;
	int m_CodeUp 	= 1;
	int m_CodeDown 	= 2;
	int m_CodeAdv	= 3;
	int m_CodeBlank	= 4;
	int m_CodeStop	= 5;
	
	public int getM_xTapeInPos() {
		return m_xTapeInPos;
	}
	public int getM_yTapeInPos() {
		return m_yTapeInPos;
	}
	public NeumannUniversalConstructor(){
		m_UniConstructor = LoadFile();
		m_ySize = m_UniConstructor.size();
		m_yTapeInPos = m_ySize - 2;
		m_xTapeInPos = ((byte[])m_UniConstructor.get(m_yTapeInPos)).length;
	}
	private ArrayList LoadFile(){
		ArrayList dataLst = new ArrayList(); 
		String classpath = 	System.getProperty("java.class.path")+
							File.separator+
							NeumannUniversalConstructor.class.getName()+
							".java";
		StringBuffer stbuf = LoadText(classpath);
		String[] lines = stbuf.toString().split("\r\n");
		boolean data = false;
		int maxlen = 0;
		for(int lns = 0;lns<lines.length;lns++){
			String oneln = lines[lns];
			if(oneln.startsWith("/*data")){
				data = true;
			}else{
				if(data==true){
					if(oneln.startsWith("data*/")){
						data = false;
						break;
					}else{
						byte[] lineAr = new byte[oneln.length()];
						if(oneln.length()>maxlen){
							maxlen = oneln.length();
						}
						for(int c=0;c<oneln.length();c++){
							lineAr[c] = (byte)(oneln.charAt(c)-'0');
						}
						dataLst.add(lineAr);
					}
				}
			}
		}
		m_xSize = maxlen;
		return dataLst;
	}
	private StringBuffer LoadText(String FileName){
		StringBuffer readinput = new StringBuffer();
		if(FileName==null){
			return null;
		}
		try {
			File f = new File(FileName);
			if(f.exists()){
				FileReader in = new FileReader(f);
				char[] buffer = new char[128];
				int len;
				while((len = in.read(buffer))!=-1) {
					readinput.append(buffer,0,len);
				}
			}
		}
		catch(IOException e) {
			System.out.println("Dateifehler");
		}
		return readinput;  	
	}
	public int getM_xSize() {
		return m_xSize;
	}
	public int getM_ySize() {
		return m_ySize;
	}
	public void CopyAt(byte[][] Field,int xPos,int yPos){
		m_ActXPos = xPos;
		m_ActYPos = yPos;
		for(int y=0;y<m_ySize;y++){
			byte[] ln = (byte[])m_UniConstructor.get(y);
			for(int x=0;x<ln.length;x++){
				byte i = ln[x];
				Field[xPos+x][yPos+y]=i;
			}			
		}
	}
	public void CopyTapeAt(byte[][] Field){
		ArrayList tp = GetConvertedTape();
		for(int i=0;i<tp.size();i++){
			Field[m_ActXPos+m_xTapeInPos+i][m_ActYPos+m_yTapeInPos] = ((Byte)tp.get(i)).byteValue();
		}
	}
	public void WriteTape(){
		ArrayList tp = GetConvertedTape();
		try{
			FileWriter fw = new FileWriter("UniversalConstructor.tape");
			for(int i=0;i<tp.size();i++){
				if(i==0){
					fw.write(((Byte)tp.get(i)).toString());					
				}else{
					fw.write(","+((Byte)tp.get(i)).toString()+",");
				}
			}
			fw.close();
		}
		catch(IOException e){
			System.out.println(e);
		}
	}
	public ArrayList GetConvertedTape(){
		int arm_X = 20;
		int arm_Y = 20;
		ArrayList tape = new ArrayList();
		
		for(int j=0;j<arm_X;j++){ 
			AddBytes2ArrayLst(tape,encodeMoves(m_CodeAdv));
		}

		for(int j=0;j<arm_Y;j++){ 
			AddBytes2ArrayLst(tape,encodeMoves(m_CodeUp));
	    }
		
		for(int y=0;y<m_ySize;y++){
			AddBytes2ArrayLst(tape,encodeMoves(m_CodeUp));
			
			byte[] ln = (byte[])m_UniConstructor.get(m_ySize-y-1);
			
			for(int x=0;x<ln.length;x++){
				AddBytes2ArrayLst(tape,encodeMoves(m_CodeAdv));
			}
			
			for(int x=0;x<ln.length;x++){
				byte p = ln[ln.length-x-1];
				AddBytes2ArrayLst(tape,encodeCell(p));
			}			
		}
		
		for(int j=0;j<arm_Y+m_ySize;j++){ 
			AddBytes2ArrayLst(tape,encodeMoves(m_CodeDown));
	    }
		
		for(int j=0;j<arm_X-1;j++){ 
			AddBytes2ArrayLst(tape,encodeMoves(m_CodeBlank));
		}
		
		AddBytes2ArrayLst(tape,encodeMoves(m_CodeStop));
		
		return tape;
	}
	private void AddBytes2ArrayLst(ArrayList arLst, Byte[] bArr ){
		for(int i=0;i<bArr.length;i++){
			arLst.add(bArr[i]);
		}		
	}
	private Byte[] encodeMoves(int state) { 
		Byte[] code = new Byte[5];
	    if(state==m_CodeUp){
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.OQD);
	    }else if(state==m_CodeAdv){
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.OQD);	    	
	    }else if(state==m_CodeDown){
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.OQD);	    	
	    }else if(state==m_CodeBlank){
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.U);	    	
	    }else if(state==m_CodeStop){
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.OQD);	    	
	    }	    
	    return code;
	}
	private Byte[] encodeCell(int state) 
	{ 
		Byte[] code = new Byte[5];
	    if(state==NeumannRules.NeumannStates.OER){
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.U);
	    }else if(state==NeumannRules.NeumannStates.OQU){ 
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	    }else if(state==NeumannRules.NeumannStates.OQL){ 
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.U); 
	    }else if(state==NeumannRules.NeumannStates.OQD){ 
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.U); 
	    }else if(state==NeumannRules.NeumannStates.SQR){ 
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.U); 
	    }else if(state==NeumannRules.NeumannStates.SQU){ 
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.U); 
	    }else if(state==NeumannRules.NeumannStates.SQL){ 
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.U); 
	    }else if(state==NeumannRules.NeumannStates.SQD){ 
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.U); 
	    }else if(state==NeumannRules.NeumannStates.C00){ 
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.OQD); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.U); 
	    }else if(state==NeumannRules.NeumannStates.U){ 
	        code[0] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[1] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[2] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[3] = new Byte((byte)NeumannRules.NeumannStates.U); 
	        code[4] = new Byte((byte)NeumannRules.NeumannStates.U); 
	    }
	    return code;
	} 
}